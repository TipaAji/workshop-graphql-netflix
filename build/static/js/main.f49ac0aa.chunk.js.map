{"version":3,"sources":["components/Card.js","components/Section.js","components/HeroSection.js","components/NavBar.js","App.js","index.js"],"names":["Card","movie","useState","isShown","setIsShown","className","onMouseEnter","onMouseLeave","controls","src","thumbnail","type","autoPlay","loop","title","Section","genre","movies","setMovies","pageState","setPageState","fetchData","fetch","method","body","JSON","stringify","response","json","responseBody","data","movies_by_genre","values","useEffect","id","map","index","onClick","HeroSection","setMovie","Math","floor","random","length","muted","synopsis","NavBar","href","App","requestedPage","setRequestedPage","genres","setGenres","isFetching","setIsFetching","pageSize","reference_list","gs","concat","goalItems","currentItems","Object","value","np","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f49ac0aa.chunk.js","sourcesContent":["import { useState } from \"react\"\r\n\r\nconst Card = ({ movie }) => {\r\n  const [isShown, setIsShown] = useState(false)\r\n\r\n  return (\r\n    <div\r\n      className=\"card\"\r\n      onMouseEnter={() => setIsShown(true)}\r\n      onMouseLeave={() => setIsShown(false)}\r\n    >\r\n      {!isShown && (\r\n        <video className=\"video\" controls>\r\n          <source src={movie.thumbnail} type=\"video/mp4\" />\r\n        </video>\r\n      )}\r\n\r\n      {isShown && (\r\n        <>\r\n          <video className=\"video\" controls autoPlay={true} loop>\r\n            <source src={movie.thumbnail} type=\"video/mp4\" />\r\n          </video>\r\n          <div className=\"info-box\">\r\n            <p>{movie.title}</p>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import { useEffect, useState } from \"react\"\r\nimport Card from \"./Card\"\r\n\r\nconst Section = ({ genre }) => {\r\n  const [movies, setMovies] = useState(null)\r\n  const [pageState, setPageState] = useState(null)\r\n\r\n  const fetchData = async () => {\r\n    const response = await fetch(\"/.netlify/functions/getMovies\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ genre: genre, pageState: pageState }),\r\n    })\r\n    const responseBody = await response.json()\r\n    setMovies(responseBody.data.movies_by_genre.values)\r\n    setPageState(responseBody.data.movies_by_genre.pageState)\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <h2 id={genre}>{genre}</h2>\r\n      {movies && (\r\n        <div className=\"movie-section\">\r\n          {movies.map((movie, index) => (\r\n            <Card key={movie.title} movie={movie} />\r\n          ))}\r\n          <div\r\n            className=\"more-button\"\r\n            onClick={() => {\r\n              setPageState(pageState)\r\n              fetchData()\r\n            }}\r\n          >\r\n            <i className=\"fas fa-angle-right\"></i>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Section\r\n","import { useState, useEffect } from \"react\"\r\n\r\nconst HeroSection = () => {\r\n  const [movie, setMovie] = useState(null)\r\n  const pageState = null\r\n\r\n  const fetchData = async () => {\r\n    const response = await fetch(\"/.netlify/functions/getMovies\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ genre: \"Sci-Fi\", pageState: pageState }),\r\n    })\r\n    const responseBody = await response.json()\r\n    const movies = responseBody.data.movies_by_genre.values\r\n    setMovie(movies[Math.floor(Math.random() * movies.length)])\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {movie && (\r\n        <div className=\"hero\">\r\n          <video className=\"hero-video\" muted controls autoPlay={true} loop>\r\n            <source src={movie.thumbnail} type=\"video/mp4\" />\r\n          </video>\r\n\r\n          <div className=\"info-section\">\r\n            <h3 className=\"hero-blurb\">{movie.synopsis}</h3>\r\n            <div className=\"button-section\">\r\n              <div className=\"button play\">\r\n                <span>\r\n                  <i className=\"fas fa-play\"></i>\r\n                </span>\r\n                Play\r\n              </div>\r\n              <div className=\"button more\">\r\n                <span>\r\n                  <i className=\"fas fa-info-circle\"></i>\r\n                </span>\r\n                More info\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HeroSection\r\n","const NavBar = () => {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <ul>\r\n        <li>\r\n          <div className=\"logo\"></div>\r\n        </li>\r\n        <li>\r\n          <a href=\"/\">Home</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavBar\r\n","import \"./App.css\"\r\nimport { useEffect, useState } from \"react\"\r\nimport Section from \"./components/Section\"\r\nimport HeroSection from \"./components/HeroSection\"\r\nimport NavBar from \"./components/NavBar\"\r\n\r\nconst App = () => {\r\n  const pageSize = 4\r\n  const [requestedPage, setRequestedPage] = useState(0)\r\n  const [pageState, setPageState] = useState(null)\r\n  const [genres, setGenres] = useState(null)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n\r\n  const fetchData = async () => {\r\n    if (! isFetching)  {\r\n      setIsFetching(true)\r\n      const response = await fetch(\"/.netlify/functions/getGenres\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({pageState, pageSize}),\r\n      })\r\n      const responseBody = await response.json()\r\n      setPageState(responseBody.data.reference_list.pageState)\r\n      setGenres(gs => (gs || []).concat(responseBody.data.reference_list.values))\r\n      setIsFetching(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // we trigger the first page of genres at the beginning\r\n    setRequestedPage(1)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const goalItems = pageSize * requestedPage\r\n    const currentItems = (genres || []).length\r\n    const bottomReached = currentItems > 0 && pageState === null\r\n    // we ask for more genres if we are not at bottom of infinite scroll\r\n    // (and if there are less items than the nominally requested pages)\r\n    if ((goalItems > currentItems) && !bottomReached){\r\n      fetchData()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [requestedPage])\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <HeroSection />\r\n      {genres && (\r\n        <div className=\"container\">\r\n          {Object.values(genres).map((genre) => (\r\n            <Section key={genre.value} genre={genre.value} />\r\n          ))}\r\n        </div>\r\n      )}\r\n      <div\r\n        className=\"page-end\"\r\n        onMouseEnter={() => {\r\n          setRequestedPage( np => np + 1 )\r\n        }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}